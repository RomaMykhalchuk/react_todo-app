{"version":3,"sources":["Components/TodoApp/TodoApp.js","Components/TodoItem/TodoItem.js","Components/TodoList/TodoList.js","Components/TodosFilter/TodosFilter.js","App.js","index.js"],"names":["TodoApp","state","inputData","handleChange","event","setState","target","value","trimLeft","clearField","this","handleSubmit","props","className","onSubmit","e","preventDefault","taskObj","id","Date","title","completed","length","placeholder","onChange","React","Component","TodoItem","isFinished","taskStatusHandler","prev","todo","statusHandler","handleTaskRemover","cn","type","checked","htmlFor","onClick","TodoList","todosList","map","key","TodosFilter","activeFilter","extractFilter","href","res","split","setActiveFilter","filter","filterSelector","selected","todos","App","filtrationType","newTask","taskId","task","filterType","filterByPattern","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b1479eb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoApp extends React.Component {\n  state = {\n    inputData: '',\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      inputData: event.target.value.trimLeft(),\n    });\n  }\n\n  clearField = () => {\n    this.setState({ inputData: '' });\n  };\n\n  render() {\n    const { inputData } = this.state;\n    const { handleSubmit } = this.props;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={(e) => {\n          e.preventDefault();\n          const taskObj = {\n            id: +new Date(),\n            title: inputData,\n            completed: false,\n          };\n\n          if (inputData.length === 0) {\n            return;\n          }\n\n          handleSubmit(taskObj);\n          this.clearField();\n        }}\n        >\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={inputData}\n            onChange={this.handleChange}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nclass TodoItem extends React.Component {\n  state = {\n    isFinished: false,\n  }\n\n  taskStatusHandler = () => {\n    this.setState(prev => ({\n      isFinished: !prev.isFinished,\n    }));\n  }\n\n  render() {\n    const { todo, statusHandler, handleTaskRemover } = this.props;\n    const { isFinished } = this.state;\n\n    return (\n      <li className={cn({ completed: todo.completed })}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={`todo-${todo.id}`}\n            checked={isFinished || todo.completed}\n            onChange={() => {\n              this.taskStatusHandler();\n              statusHandler(todo.id);\n            }}\n          />\n          <label\n            htmlFor={`todo-${todo.id}`}\n          >\n            {todo.title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => handleTaskRemover(todo.id)}\n          />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  handleTaskRemover: PropTypes.func.isRequired,\n  statusHandler: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\nimport TodoItem from '../TodoItem/TodoItem';\n\nclass TodoList extends React.Component {\nstate = {\n\n}\n\nrender() {\n  const { todosList, handleTaskRemover, statusHandler } = this.props;\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\">\n        {todosList.map(todo => (\n          <TodoItem\n            todo={todo}\n            key={todo.id}\n            handleTaskRemover={handleTaskRemover}\n            statusHandler={statusHandler}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n}\n}\n/* <li className=\"completed\">\n        <div className=\"view\">\n          <input type=\"checkbox\" className=\"toggle\" id=\"todo-2\" />\n          <label htmlFor=\"todo-2\">qwertyuio</label>\n          <button type=\"button\" className=\"destroy\" />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li>\n\n      <li className=\"editing\">\n        <div className=\"view\">\n          <input type=\"checkbox\" className=\"toggle\" id=\"todo-3\" />\n          <label htmlFor=\"todo-3\">zxcvbnm</label>\n          <button type=\"button\" className=\"destroy\" />\n        </div>\n        <input type=\"text\" className=\"edit\" />\n      </li> */\n\nTodoList.propTypes = {\n  todosList: PropTypes.arrayOf({\n    todo: PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  }).isRequired,\n  handleTaskRemover: PropTypes.func.isRequired,\n  statusHandler: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nclass TodosFilter extends React.Component {\n  state = {\n    activeFilter: 'all',\n  };\n\n  extractFilter = (href) => {\n    const res = href.split('/');\n\n    return res[res.length - 1];\n  };\n\n  setActiveFilter = (filter) => {\n    if (filter === '') {\n      this.setState({ activeFilter: 'all' });\n    } else {\n      this.setState({ activeFilter: filter });\n    }\n  }\n\n  render() {\n    const { filterSelector } = this.props;\n    const { activeFilter } = this.state;\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          items left\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              className={cn({\n                selected: activeFilter === 'all',\n              })}\n              onClick={(e) => {\n                const { href } = e.target;\n\n                this.setActiveFilter(this.extractFilter(href));\n\n                return filterSelector(this.extractFilter(href));\n              }}\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              className={cn({\n                selected: activeFilter === 'active',\n              })}\n              href=\"#/active\"\n              onClick={(e) => {\n                const { href } = e.target;\n\n                this.setActiveFilter(this.extractFilter(href));\n\n                return filterSelector(this.extractFilter(href));\n              }}\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              className={cn({\n                selected: activeFilter === 'completed',\n              })}\n              href=\"#/completed\"\n              onClick={(e) => {\n                const { href } = e.target;\n\n                this.setActiveFilter(this.extractFilter(href));\n\n                return filterSelector(this.extractFilter(href));\n              }}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n\n        <button type=\"button\" className=\"clear-completed\">\n          Clear completed\n        </button>\n      </footer>\n    );\n  }\n}\n\nTodosFilter.propTypes = {\n  filterSelector: PropTypes.func.isRequired,\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport TodoApp from './Components/TodoApp/TodoApp';\nimport TodoList from './Components/TodoList/TodoList';\nimport TodosFilter from './Components/TodosFilter/TodosFilter';\n\nconst todos = [\n  {\n    title: 'Clean a car',\n    id: 1,\n    completed: false,\n  },\n  {\n    title: 'Go to the gym',\n    id: 2,\n    completed: false,\n  },\n];\n\nclass App extends React.Component {\n  state = {\n    todos: [...todos],\n    filtrationType: '',\n  }\n\n  handleSubmit = (newTask) => {\n    this.setState(prev => ({\n      todos: [...prev.todos, newTask],\n    }));\n  }\n\n  handleTaskRemover = (taskId) => {\n    this.setState(prev => ({\n      todos: [...prev.todos].filter(task => taskId !== task.id),\n    }));\n  }\n\n  statusHandler = (taskId) => {\n    this.setState(prev => ({\n      todos: prev.todos.map((task) => {\n        if (task.id === taskId) {\n          return {\n            ...task,\n            completed: !task.completed,\n          };\n        }\n\n        return task;\n      }),\n    }));\n  }\n\n filterSelector = (filterType) => {\n   this.setState({ filtrationType: filterType });\n }\n\n filterByPattern = () => {\n   switch (this.state.filtrationType) {\n     case 'active':\n       return this.state.todos.filter(task => task.completed === false);\n\n     case 'completed':\n       return this.state.todos.filter(task => task.completed !== false);\n\n     default:\n       return this.state.todos;\n   }\n }\n\n render() {\n   return (\n     <section className=\"todoapp\">\n       <TodoApp handleSubmit={this.handleSubmit} />\n       <TodoList\n         todosList={this.filterByPattern()}\n         handleTaskRemover={this.handleTaskRemover}\n         statusHandler={this.statusHandler}\n       />\n       <TodosFilter\n         filterSelector={this.filterSelector}\n       />\n     </section>\n   );\n }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}