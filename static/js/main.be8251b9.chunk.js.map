{"version":3,"sources":["Components/TodoApp/TodoApp.js","Components/TodoItem/TodoItem.js","Components/TodoList/TodoList.js","Components/TodosFilter/TodosFilter.js","App.js","index.js"],"names":["TodoApp","state","inputData","handleChange","event","setState","target","value","trimLeft","clearField","this","handleSubmit","props","className","onSubmit","e","preventDefault","taskObj","id","Date","title","completed","length","placeholder","onChange","React","Component","TodoItem","isEditing","editingId","actualTodoData","setEditField","updField","data","hideEditField","todo","statusHandler","handleTaskRemover","updateTask","cn","editing","onDoubleClick","type","checked","onClick","ref","input","focus","onKeyDown","currentKey","key","keyCode","onBlur","TodoList","clicks","clicksIncrement","prev","todosList","checkAllTasks","htmlFor","map","TodosFilter","activeFilter","extractFilter","href","res","split","setActiveFilter","filter","filterSelector","activeTasksCounter","clearButtonStatus","removeCheckedTasks","selected","todos","App","filtrationType","newTask","taskId","task","filterType","filterByPattern","getClearButtonStatus","some","tasksListLength","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be8251b9.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoApp extends React.Component {\n  state = {\n    inputData: '',\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      inputData: event.target.value.trimLeft(),\n    });\n  }\n\n  clearField = () => {\n    this.setState({ inputData: '' });\n  };\n\n  render() {\n    const { inputData } = this.state;\n    const { handleSubmit } = this.props;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={(e) => {\n          e.preventDefault();\n          const taskObj = {\n            id: +new Date(),\n            title: inputData,\n            completed: false,\n          };\n\n          if (inputData.length === 0) {\n            return;\n          }\n\n          handleSubmit(taskObj);\n          this.clearField();\n        }}\n        >\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={inputData}\n            onChange={this.handleChange}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nclass TodoItem extends React.Component {\n  state = {\n    isEditing: false,\n    editingId: '',\n    actualTodoData: '',\n  }\n\n  setEditField = (id) => {\n    this.setState({\n      isEditing: true,\n      editingId: id,\n    });\n  }\n\n  updField = (data) => {\n    this.setState({ actualTodoData: data });\n  }\n\n  hideEditField = () => {\n    this.setState({ isEditing: false });\n  }\n\n  render() {\n    const { todo, statusHandler, handleTaskRemover, updateTask } = this.props;\n    const { actualTodoData, editingId } = this.state;\n\n    return (\n      <li\n        className={cn({\n          completed: todo.completed,\n          editing: this.state.isEditing,\n        })}\n\n        onDoubleClick={(e) => {\n          this.setState({ actualTodoData: todo.title });\n          this.setEditField(e.target.id);\n        }}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={`todo-${todo.id}`}\n            checked={todo.completed}\n            onChange={() => {\n              statusHandler(todo.id);\n            }}\n          />\n          <label\n            id={todo.id}\n          >\n            {todo.title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => handleTaskRemover(todo.id)}\n          />\n        </div>\n        <input\n          ref={input => input && input.focus()}\n          type=\"text\"\n          className=\"edit\"\n          value={this.state.actualTodoData}\n          onChange={(e) => {\n            this.updField(e.target.value);\n          }}\n          onKeyDown={(e) => {\n            const currentKey = e.key;\n\n            if (currentKey === 'Enter' && actualTodoData.length === 0) {\n              handleTaskRemover(editingId);\n              this.hideEditField();\n            } else if (currentKey === 'Enter') {\n              updateTask(actualTodoData, editingId);\n              this.hideEditField();\n            } else if (e.keyCode === 27) {\n              this.hideEditField();\n            }\n          }}\n          onBlur={() => {\n            updateTask(actualTodoData, editingId);\n            this.hideEditField();\n          }}\n        />\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  handleTaskRemover: PropTypes.func.isRequired,\n  statusHandler: PropTypes.func.isRequired,\n  updateTask: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\nimport TodoItem from '../TodoItem/TodoItem';\n\nclass TodoList extends React.Component {\nstate = {\n  clicks: 1,\n}\n\nclicksIncrement = () => {\n  this.setState(prev => ({\n    clicks: prev.clicks + 1,\n  }));\n}\n\nrender() {\n  const { todosList,\n    handleTaskRemover,\n    statusHandler,\n    checkAllTasks,\n    updateTask } = this.props;\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n      />\n      <label\n        htmlFor=\"toggle-all\"\n        onClick={() => {\n          this.clicksIncrement();\n          checkAllTasks(this.state.clicks);\n        }}\n      >\n        Mark all as complete\n      </label>\n\n      <ul className=\"todo-list\">\n        {todosList.map(todo => (\n          <TodoItem\n            todo={todo}\n            key={todo.id}\n            handleTaskRemover={handleTaskRemover}\n            statusHandler={statusHandler}\n            updateTask={updateTask}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n}\n}\n\nTodoList.propTypes = {\n  todosList: PropTypes.arrayOf({\n    todo: PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  }).isRequired,\n  handleTaskRemover: PropTypes.func.isRequired,\n  statusHandler: PropTypes.func.isRequired,\n  checkAllTasks: PropTypes.func.isRequired,\n  updateTask: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nclass TodosFilter extends React.Component {\n  state = {\n    activeFilter: 'all',\n  };\n\n  extractFilter = (href) => {\n    const res = href.split('/');\n\n    return res[res.length - 1];\n  };\n\n  setActiveFilter = (filter) => {\n    if (filter === '') {\n      this.setState({ activeFilter: 'all' });\n    } else {\n      this.setState({ activeFilter: filter });\n    }\n  }\n\n  render() {\n    const {\n      filterSelector,\n      activeTasksCounter,\n      clearButtonStatus,\n      removeCheckedTasks,\n    } = this.props;\n    const { activeFilter } = this.state;\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          unfinished tasks\n          {' '}\n          {activeTasksCounter()}\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              className={cn({\n                selected: activeFilter === 'all',\n              })}\n              onClick={(e) => {\n                const { href } = e.target;\n\n                this.setActiveFilter(this.extractFilter(href));\n\n                return filterSelector(this.extractFilter(href));\n              }}\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              className={cn({\n                selected: activeFilter === 'active',\n              })}\n              href=\"#/active\"\n              onClick={(e) => {\n                const { href } = e.target;\n\n                this.setActiveFilter(this.extractFilter(href));\n\n                return filterSelector(this.extractFilter(href));\n              }}\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              className={cn({\n                selected: activeFilter === 'completed',\n              })}\n              href=\"#/completed\"\n              onClick={(e) => {\n                const { href } = e.target;\n\n                this.setActiveFilter(this.extractFilter(href));\n\n                return filterSelector(this.extractFilter(href));\n              }}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n        {clearButtonStatus && (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={removeCheckedTasks}\n\n          >\n            Clear completed\n          </button>\n        )}\n\n      </footer>\n    );\n  }\n}\n\nTodosFilter.propTypes = {\n  removeCheckedTasks: PropTypes.func.isRequired,\n  activeTasksCounter: PropTypes.func.isRequired,\n  filterSelector: PropTypes.func.isRequired,\n  clearButtonStatus: PropTypes.bool.isRequired,\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport TodoApp from './Components/TodoApp/TodoApp';\nimport TodoList from './Components/TodoList/TodoList';\nimport TodosFilter from './Components/TodosFilter/TodosFilter';\n\nconst todos = [\n  {\n    title: 'Clean a car',\n    id: 1,\n    completed: false,\n  },\n  {\n    title: 'Go to the gym',\n    id: 2,\n    completed: false,\n  },\n];\n\nclass App extends React.Component {\n  state = {\n    todos: [...todos],\n    filtrationType: '',\n  }\n\n  handleSubmit = (newTask) => {\n    this.setState(prev => ({\n      todos: [...prev.todos, newTask],\n    }));\n  }\n\n  statusHandler = (taskId) => {\n    this.setState(prev => ({\n      todos: prev.todos.map((task) => {\n        if (task.id === taskId) {\n          return {\n            ...task,\n            completed: !task.completed,\n          };\n        }\n\n        return task;\n      }),\n    }));\n  }\n\n  filterSelector = (filterType) => {\n    this.setState({ filtrationType: filterType });\n  }\n\n  filterByPattern = () => {\n    switch (this.state.filtrationType) {\n      case 'active':\n        return this.state.todos.filter(task => !task.completed);\n\n      case 'completed':\n        return this.state.todos.filter(task => task.completed);\n\n      default:\n        return this.state.todos;\n    }\n  }\n\n  activeTasksCounter = () => this.state.todos\n    .filter(task => !task.completed).length\n\n  handleTaskRemover = (taskId) => {\n    this.setState(prev => ({\n      todos: [...prev.todos].filter(task => +taskId !== task.id),\n    }));\n  }\n\n  removeCheckedTasks = () => {\n    this.setState(prev => ({\n      todos: [...prev.todos].filter(task => !task.completed),\n    }));\n  }\n\n  getClearButtonStatus = () => this.state.todos.some(task => task.completed)\n\n  checkAllTasks = (clicks) => {\n    if (clicks % 2 === 0) {\n      this.setState(prev => ({\n        todos: [...prev.todos].map(task => ({\n          ...task,\n          completed: false,\n        })),\n      }));\n    } else {\n      this.setState(prev => ({\n        todos: [...prev.todos].map(task => ({\n          ...task,\n          completed: true,\n        })),\n      }));\n    }\n  }\n\n  updateTask = (data, id) => {\n    this.setState(prev => ({\n      todos: prev.todos.map((task) => {\n        if (task.id === +id) {\n          return {\n            ...task,\n            title: data,\n          };\n        }\n\n        return task;\n      }),\n    }));\n  }\n\n  render() {\n    const tasksListLength = this.state.todos.length;\n\n    return (\n      <section className=\"todoapp\">\n        <TodoApp\n          handleSubmit={this.handleSubmit}\n        />\n        {tasksListLength !== 0 && (\n          <TodoList\n            checkAllTasks={this.checkAllTasks}\n            todosList={this.filterByPattern()}\n            handleTaskRemover={this.handleTaskRemover}\n            statusHandler={this.statusHandler}\n            updateTask={this.updateTask}\n\n          />\n        )}\n        {tasksListLength !== 0 && (\n          <TodosFilter\n            activeTasksCounter={this.activeTasksCounter}\n            filterSelector={this.filterSelector}\n            clearButtonStatus={this.getClearButtonStatus()}\n            removeCheckedTasks={this.removeCheckedTasks}\n          />\n        ) }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}